import json
import ijson


class json_wrapper:
    def __init__(self, path):
        self.analyze_json(path)

    result = []

    class Token:
        def __init__(self, name, range, definition, reference, uri, children):
            self.name = name
            self.range = range
            self.definition = definition
            self.reference = reference
            self.uri = uri
            self.children = children

    class function:
        def __init__(self, name, tokens):
            self.name = name
            self.token = tokens

    class Lsp_info:
        def __int__(self, class_name, start_location, child_func, child_var, child_class):
            self.class_name = child_class
            self.start_location = start_location
            self.child_func = child_func
            self.child_var = child_var
            self.child_class = child_class

    def traverse_json(parser):
        """
        Traverse a tree-shaped JSON and print the values of all leaf nodes.
        """
        lsp_tree_info_values = []
        stack = []
        # Get an ijson parser for the node
        for prefix, event, value in parser:
            # If the event is the start of an array or object, recurse into it
            if event == 'start_array' or event == 'start_map':
                stack.append(prefix)
            elif event == 'end_array' or event == 'end_map':
                print(stack.pop())
            elif event == 'key' and value == 'lspTreeInfo':
                lsp_prefix = '.'.join(stack) + '.' + value
                lsp_parser = ijson.parse(parser)
                for lsp_prefix, lsp_event, lsp_value in lsp_parser:
                    if lsp_event == 'number' or lsp_event == 'string' or lsp_event == 'boolean':
                        lsp_tree_info_values.append(lsp_value)
        return lsp_tree_info_values

    # def get_lsp_tree_values(parser):
    #     # Create an ijson parser for the JSON data
    #     # Initialize a stack to keep track of nested objects and arrays
    #     stack = []
    #     # Initialize a variable to store the values of the 'lspTreeInfo' key
    #     lsp_tree_values = []
    #     parse_event = parser;
    #     # Iterate over the events generated by the parser
    #     for prefix, event, value in parser:
    #         # print(stack)
    #
    #         # print(prefix,'',event,'',value)
    #         # If the event is the start of an array or object, push the prefix onto the stack
    #         if event == 'start_array' or event == 'start_map':
    #             stack.append(prefix)
    #             lsp_prefix = '.'.join(stack) + '.'
    #             print(lsp_prefix)
    #         # If the event is the end of an array or object, pop the prefix off the stack
    #         elif event == 'end_array' or event == 'end_map':
    #             stack.pop()
    #         # If the event is a key and the key is 'lspTreeInfo', extract its value
    #         elif event == 'map_key' and value == 'lspTreeInfo':
    #             # Get the prefix of the 'lspTreeInfo' key
    #             lsp_prefix = '.'.join(stack) + '.' + value
    #             print(lsp_prefix)
    #             # for prefix, event, value in ijson.items(parser, lsp_prefix+'.item'):
    #             #     print(prefix, event, value)
    #             # Traverse the 'lspTreeInfo' value and extract its leaf nodes
    #     # Return the values of the 'lspTreeInfo' key
    #     return lsp_tree_values

    # def analyze_json_with_ijson(path):
    #     with open(path, 'r') as f:
    #         parser = ijson.parse(f)
    #         get_lsp_tree_values(parser)
    def analyze_json(self, path):
        with open(path, 'r', encoding='utf-8') as f:
            json_tree = json.load(f)
            # print(json_tree,' ',type(json_tree))
            tree_info_list = {}
            token_list = []
            comment_list = {}
            self.traverse_project_tree(json_tree, tree_info_list, comment_list)
            lsp_info_list = {}
            # print(tree_info_list.keys())
            for file, lsp_tree_info in tree_info_list.items():
                # print(file, lsp_tree_info)
                # for key, value in lsp_tree_info.items():
                # print('key',key,' ',value)
                self.traverse_lsp_info_tree(lsp_tree_info, token_list)

            # for item in token_list:
            #     print('token name:', item.name,' start location:', item.range)
            # for file, comment in comment_list.items():
            #     print(comment[0])

    # lsp_tree_info_list stored the information of all java files' lsp output.

    # json_tree
    #   --- commentList key: file_name value: commentList
    #   --- tree_info_list  key: file_name value: lspInfo of this file.
    #       --- lsp_tree_info
    #           name, children, startLocation, reference, definition, type, uri
    #           type : func / others

    def traverse_project_tree(self, node, lsp_tree_info_list, commentList):
        if isinstance(node, dict):
            # if the node is a dictionary, traverse each key-value pair recursively
            # print('------------')
            for key, value in node.items():
                # print('key', key)
                self.traverse_project_tree(value, lsp_tree_info_list, commentList)
                if key == 'lspTreeInfo' and len(value) != 0:
                    lsp_tree_info_list[node['name']] = value[0]
                if key == 'commentsInfo' and len(value) != 0:
                    # print(value)
                    commentList[node['name']] = value
        elif isinstance(node, list):
            # if the node is a list, traverse each item in the list recursively
            for item in node:
                self.traverse_project_tree(item, lsp_tree_info_list, commentList)
        # else:
        #     # if the node is a leaf node, print its value
        #     print(node)

    # wrap the lsp info.
    def traverse_lsp_info_tree(self, lsp_info, tokenList):
        # if the node is a dictionary, traverse each key-value pair recursively
        # print('node',type(node))
        # for key, value in lsp_info.items():
        #     print('key ',key)

        if lsp_info['type'] == 'func':
            token_in_func = []
            for item in lsp_info['children']:
                token_in_func.append(
                    self.Token(item['name'], item['startLocation'], item['definition'], item['reference'], item['uri'],
                               item['children']))
            func = self.function(lsp_info['name'], token_in_func)
            self.result.append(func)
        else:
            token = self.Token(lsp_info['name'], lsp_info['startLocation'], lsp_info['definition'],
                               lsp_info['reference'], lsp_info['uri'], lsp_info['children'])
            tokenList.append(token)
            for item in lsp_info['children']:
                self.traverse_lsp_info_tree(item, tokenList)
            self.result.append(token)

    # Press the green button in the gutter to run the script.
    # if __name__ == '__main__':
    #      analyze_json("Json/tree_info3.json")
    #      for item in result:
    #          if(type(item)==function):
    #              print(item.name)
    #              for token in item.token:
    #                  print('    ',token.name)
    #          else:
    #              print(item.name)
    #      # print(analyze_json_with_ijson("Json/tree_info.json"))
